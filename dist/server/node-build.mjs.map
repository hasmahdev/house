{"version":3,"file":"node-build.mjs","sources":["../../server/routes/demo.ts","../../server/lib/supabase.ts","../../server/routes/auth.ts","../../server/routes/cleaning.ts","../../server/index.ts","../../server/node-build.ts"],"sourcesContent":["import { RequestHandler } from \"express\";\nimport { DemoResponse } from \"@shared/api\";\n\nexport const handleDemo: RequestHandler = (req, res) => {\n  const response: DemoResponse = {\n    message: \"Hello from Express server\",\n  };\n  res.status(200).json(response);\n};\n","import { createClient, SupabaseClient } from \"@supabase/supabase-js\";\n\nconst supabaseUrl = process.env.SUPABASE_URL as string | undefined;\nconst serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY as\n  | string\n  | undefined;\n\nexport const supabaseServer: SupabaseClient | null =\n  supabaseUrl && serviceRoleKey\n    ? createClient(supabaseUrl, serviceRoleKey, {\n        auth: { autoRefreshToken: false, persistSession: false },\n      })\n    : null;\n\n","import { RequestHandler } from \"express\";\nimport { LoginRequest, LoginResponse, User } from \"@shared/api\";\nimport { supabaseServer } from \"../lib/supabase\";\n\n// Mock users database - in production, this would be a real database\nconst users: User[] = [\n  {\n    id: \"1\",\n    name: \"مدير النظام\",\n    role: \"admin\",\n    password: \"admin123\", // In production, this would be hashed\n    createdAt: new Date(),\n    updatedAt: new Date(),\n  },\n  {\n    id: \"2\",\n    name: \"عضو العائلة\",\n    role: \"member\",\n    password: \"member123\", // In production, this would be hashed\n    createdAt: new Date(),\n    updatedAt: new Date(),\n  },\n];\n\nexport const handleLogin: RequestHandler = async (req, res) => {\n  try {\n    const { userId, password }: LoginRequest = req.body;\n\n    if (!userId || !password) {\n      return res\n        .status(400)\n        .json({ error: \"User ID and password are required\" });\n    }\n\n    // If Supabase is configured, use it for auth\n    if (supabaseServer) {\n      // Here we treat userId as email for Supabase email sign-in\n      const { data, error } = await supabaseServer.auth.signInWithPassword({\n        email: userId,\n        password,\n      });\n      if (error || !data.session || !data.user) {\n        return res.status(401).json({ error: \"Invalid credentials\" });\n      }\n\n      const user: User = {\n        id: data.user.id,\n        name: data.user.email ?? data.user.id,\n        role: \"member\",\n        createdAt: new Date(data.user.created_at ?? Date.now()),\n        updatedAt: new Date(),\n      };\n\n      const response: LoginResponse = {\n        user,\n        token: data.session.access_token,\n      };\n      return res.json(response);\n    }\n\n    // Fallback to mock users (no Supabase configured)\n    const user = users.find((u) => u.id === userId && u.password === password);\n    if (!user) {\n      return res.status(401).json({ error: \"Invalid credentials\" });\n    }\n    const { password: _, ...userWithoutPassword } = user;\n    const response: LoginResponse = {\n      user: userWithoutPassword,\n      token: `mock-jwt-token-${user.id}`,\n    };\n    res.json(response);\n  } catch (error) {\n    console.error(\"Login error:\", error);\n    res.status(500).json({ error: \"Internal server error\" });\n  }\n};\n\nexport const handleGetUsers: RequestHandler = (req, res) => {\n  try {\n    // Remove passwords from response\n    const usersWithoutPasswords = users.map(({ password, ...user }) => user);\n    res.json(usersWithoutPasswords);\n  } catch (error) {\n    console.error(\"Get users error:\", error);\n    res.status(500).json({ error: \"Internal server error\" });\n  }\n};\n\nexport const handleCreateUser: RequestHandler = (req, res) => {\n  try {\n    const { name, password, role } = req.body;\n\n    if (!name || !password || !role) {\n      return res.status(400).json({ error: \"All fields are required\" });\n    }\n\n    if (users.find((u) => u.name === name)) {\n      return res\n        .status(400)\n        .json({ error: \"User with this name already exists\" });\n    }\n\n    const newUser: User = {\n      id: (users.length + 1).toString(),\n      name,\n      role,\n      password, // In production, this would be hashed\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n\n    users.push(newUser);\n\n    // Remove password from response\n    const { password: _, ...userWithoutPassword } = newUser;\n    res.status(201).json(userWithoutPassword);\n  } catch (error) {\n    console.error(\"Create user error:\", error);\n    res.status(500).json({ error: \"Internal server error\" });\n  }\n};\n\nexport const handleDeleteUser: RequestHandler = (req, res) => {\n  try {\n    const { userId } = req.params;\n\n    const userIndex = users.findIndex((u) => u.id === userId);\n    if (userIndex === -1) {\n      return res.status(404).json({ error: \"User not found\" });\n    }\n\n    users.splice(userIndex, 1);\n    res.status(204).send();\n  } catch (error) {\n    console.error(\"Delete user error:\", error);\n    res.status(500).json({ error: \"Internal server error\" });\n  }\n};\n","import { RequestHandler } from \"express\";\nimport {\n  Room,\n  Section,\n  Mission,\n  CreateRoomRequest,\n  CreateSectionRequest,\n  CreateMissionRequest,\n  UpdateMissionRequest,\n} from \"@shared/api\";\n\n// Mock data - in production, this would be a real database\nlet rooms: Room[] = [\n  {\n    id: \"1\",\n    name: \"Kitchen\",\n    description: \"Main cooking and dining area\",\n    createdAt: new Date(),\n    updatedAt: new Date(),\n  },\n  {\n    id: \"2\",\n    name: \"Living Room\",\n    description: \"Family gathering space\",\n    createdAt: new Date(),\n    updatedAt: new Date(),\n  },\n  {\n    id: \"3\",\n    name: \"Bathroom\",\n    description: \"Main bathroom\",\n    createdAt: new Date(),\n    updatedAt: new Date(),\n  },\n];\n\nlet sections: Section[] = [\n  {\n    id: \"1\",\n    name: \"Countertops\",\n    description: \"Kitchen counter surfaces\",\n    roomId: \"1\",\n    createdAt: new Date(),\n    updatedAt: new Date(),\n  },\n  {\n    id: \"2\",\n    name: \"Appliances\",\n    description: \"Kitchen appliances\",\n    roomId: \"1\",\n    createdAt: new Date(),\n    updatedAt: new Date(),\n  },\n  {\n    id: \"3\",\n    name: \"Seating Area\",\n    description: \"Sofas and chairs\",\n    roomId: \"2\",\n    createdAt: new Date(),\n    updatedAt: new Date(),\n  },\n];\n\nlet missions: Mission[] = [\n  {\n    id: \"1\",\n    title: \"Clean kitchen counters\",\n    description: \"Wipe down all countertops and appliances\",\n    sectionId: \"1\",\n    assignedToUserId: \"2\",\n    status: \"pending\",\n    priority: \"high\",\n    createdAt: new Date(),\n    updatedAt: new Date(),\n  },\n  {\n    id: \"2\",\n    title: \"Vacuum living room\",\n    description: \"Vacuum the carpet and clean under furniture\",\n    sectionId: \"3\",\n    assignedToUserId: \"2\",\n    status: \"in_progress\",\n    priority: \"medium\",\n    createdAt: new Date(),\n    updatedAt: new Date(),\n  },\n];\n\n// Room endpoints\nexport const handleGetRooms: RequestHandler = (req, res) => {\n  res.json(rooms);\n};\n\nexport const handleCreateRoom: RequestHandler = (req, res) => {\n  try {\n    const { name, description }: CreateRoomRequest = req.body;\n\n    if (!name) {\n      return res.status(400).json({ error: \"Room name is required\" });\n    }\n\n    const newRoom: Room = {\n      id: (rooms.length + 1).toString(),\n      name,\n      description,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n\n    rooms.push(newRoom);\n    res.status(201).json(newRoom);\n  } catch (error) {\n    console.error(\"Create room error:\", error);\n    res.status(500).json({ error: \"Internal server error\" });\n  }\n};\n\nexport const handleDeleteRoom: RequestHandler = (req, res) => {\n  try {\n    const { roomId } = req.params;\n\n    const roomIndex = rooms.findIndex((r) => r.id === roomId);\n    if (roomIndex === -1) {\n      return res.status(404).json({ error: \"Room not found\" });\n    }\n\n    // Also delete associated sections and missions\n    sections = sections.filter((s) => s.roomId !== roomId);\n    missions = missions.filter(\n      (m) => !sections.find((s) => s.id === m.sectionId && s.roomId === roomId),\n    );\n\n    rooms.splice(roomIndex, 1);\n    res.status(204).send();\n  } catch (error) {\n    console.error(\"Delete room error:\", error);\n    res.status(500).json({ error: \"Internal server error\" });\n  }\n};\n\n// Section endpoints\nexport const handleGetSections: RequestHandler = (req, res) => {\n  const { roomId } = req.params;\n  const roomSections = sections.filter((s) => s.roomId === roomId);\n  res.json(roomSections);\n};\n\nexport const handleCreateSection: RequestHandler = (req, res) => {\n  try {\n    const { name, description, roomId }: CreateSectionRequest = req.body;\n\n    if (!name || !roomId) {\n      return res\n        .status(400)\n        .json({ error: \"Section name and room ID are required\" });\n    }\n\n    const room = rooms.find((r) => r.id === roomId);\n    if (!room) {\n      return res.status(400).json({ error: \"Room not found\" });\n    }\n\n    const newSection: Section = {\n      id: (sections.length + 1).toString(),\n      name,\n      description,\n      roomId,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n\n    sections.push(newSection);\n    res.status(201).json(newSection);\n  } catch (error) {\n    console.error(\"Create section error:\", error);\n    res.status(500).json({ error: \"Internal server error\" });\n  }\n};\n\n// Mission endpoints\nexport const handleGetMissions: RequestHandler = (req, res) => {\n  const { userId } = req.query;\n\n  if (userId) {\n    const userMissions = missions.filter((m) => m.assignedToUserId === userId);\n    return res.json(userMissions);\n  }\n\n  res.json(missions);\n};\n\nexport const handleCreateMission: RequestHandler = (req, res) => {\n  try {\n    const {\n      title,\n      description,\n      sectionId,\n      assignedToUserId,\n      priority,\n      dueDate,\n    }: CreateMissionRequest = req.body;\n\n    if (!title || !sectionId || !assignedToUserId || !priority) {\n      return res\n        .status(400)\n        .json({\n          error:\n            \"Title, section ID, assigned user ID, and priority are required\",\n        });\n    }\n\n    const section = sections.find((s) => s.id === sectionId);\n    if (!section) {\n      return res.status(400).json({ error: \"Section not found\" });\n    }\n\n    const newMission: Mission = {\n      id: (missions.length + 1).toString(),\n      title,\n      description,\n      sectionId,\n      assignedToUserId,\n      status: \"pending\",\n      priority,\n      dueDate: dueDate ? new Date(dueDate) : undefined,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n\n    missions.push(newMission);\n    res.status(201).json(newMission);\n  } catch (error) {\n    console.error(\"Create mission error:\", error);\n    res.status(500).json({ error: \"Internal server error\" });\n  }\n};\n\nexport const handleUpdateMission: RequestHandler = (req, res) => {\n  try {\n    const { missionId } = req.params;\n    const updates: UpdateMissionRequest = req.body;\n\n    const missionIndex = missions.findIndex((m) => m.id === missionId);\n    if (missionIndex === -1) {\n      return res.status(404).json({ error: \"Mission not found\" });\n    }\n\n    const mission = missions[missionIndex];\n    const updatedMission: Mission = {\n      ...mission,\n      ...updates,\n      dueDate: updates.dueDate ? new Date(updates.dueDate) : mission.dueDate,\n      completedAt:\n        updates.status === \"completed\" && mission.status !== \"completed\"\n          ? new Date()\n          : mission.completedAt,\n      updatedAt: new Date(),\n    };\n\n    missions[missionIndex] = updatedMission;\n    res.json(updatedMission);\n  } catch (error) {\n    console.error(\"Update mission error:\", error);\n    res.status(500).json({ error: \"Internal server error\" });\n  }\n};\n\nexport const handleDeleteMission: RequestHandler = (req, res) => {\n  try {\n    const { missionId } = req.params;\n\n    const missionIndex = missions.findIndex((m) => m.id === missionId);\n    if (missionIndex === -1) {\n      return res.status(404).json({ error: \"Mission not found\" });\n    }\n\n    missions.splice(missionIndex, 1);\n    res.status(204).send();\n  } catch (error) {\n    console.error(\"Delete mission error:\", error);\n    res.status(500).json({ error: \"Internal server error\" });\n  }\n};\n","import \"dotenv/config\";\nimport express from \"express\";\nimport cors from \"cors\";\nimport { handleDemo } from \"./routes/demo\";\nimport {\n  handleLogin,\n  handleGetUsers,\n  handleCreateUser,\n  handleDeleteUser,\n} from \"./routes/auth\";\nimport {\n  handleGetRooms,\n  handleCreateRoom,\n  handleDeleteRoom,\n  handleGetSections,\n  handleCreateSection,\n  handleGetMissions,\n  handleCreateMission,\n  handleUpdateMission,\n  handleDeleteMission,\n} from \"./routes/cleaning\";\n\nexport function createServer() {\n  const app = express();\n\n  // Middleware\n  app.use(cors());\n  app.use(express.json());\n  app.use(express.urlencoded({ extended: true }));\n\n  // Example API routes\n  app.get(\"/api/ping\", (_req, res) => {\n    const ping = process.env.PING_MESSAGE ?? \"ping\";\n    res.json({ message: ping });\n  });\n\n  app.get(\"/api/demo\", handleDemo);\n\n  // Auth routes\n  app.post(\"/api/auth/login\", handleLogin);\n  app.get(\"/api/users\", handleGetUsers);\n  app.post(\"/api/users\", handleCreateUser);\n  app.delete(\"/api/users/:userId\", handleDeleteUser);\n\n  // Room routes\n  app.get(\"/api/rooms\", handleGetRooms);\n  app.post(\"/api/rooms\", handleCreateRoom);\n  app.delete(\"/api/rooms/:roomId\", handleDeleteRoom);\n\n  // Section routes\n  app.get(\"/api/rooms/:roomId/sections\", handleGetSections);\n  app.post(\"/api/sections\", handleCreateSection);\n\n  // Mission routes\n  app.get(\"/api/missions\", handleGetMissions);\n  app.post(\"/api/missions\", handleCreateMission);\n  app.put(\"/api/missions/:missionId\", handleUpdateMission);\n  app.delete(\"/api/missions/:missionId\", handleDeleteMission);\n\n  return app;\n}\n","import path from \"path\";\nimport { createServer } from \"./index\";\nimport * as express from \"express\";\n\nconst app = createServer();\nconst port = process.env.PORT || 3000;\n\n// In production, serve the built SPA files\nconst __dirname = import.meta.dirname;\nconst distPath = path.join(__dirname, \"../spa\");\n\n// Serve static files\napp.use(express.static(distPath));\n\n// Handle React Router - serve index.html for all non-API routes\napp.get(\"*\", (req, res) => {\n  // Don't serve index.html for API routes\n  if (req.path.startsWith(\"/api/\") || req.path.startsWith(\"/health\")) {\n    return res.status(404).json({ error: \"API endpoint not found\" });\n  }\n\n  res.sendFile(path.join(distPath, \"index.html\"));\n});\n\napp.listen(port, () => {\n  console.log(`🚀 Fusion Starter server running on port ${port}`);\n  console.log(`📱 Frontend: http://localhost:${port}`);\n  console.log(`🔧 API: http://localhost:${port}/api`);\n});\n\n// Graceful shutdown\nprocess.on(\"SIGTERM\", () => {\n  console.log(\"🛑 Received SIGTERM, shutting down gracefully\");\n  process.exit(0);\n});\n\nprocess.on(\"SIGINT\", () => {\n  console.log(\"🛑 Received SIGINT, shutting down gracefully\");\n  process.exit(0);\n});\n"],"names":["user","response","app","express"],"mappings":"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"}